#!/usr/licensed/anaconda3/2024.6/bin/python

import argparse
import os

parser = argparse.ArgumentParser()
parser.add_argument('-j', '--job-name', type=str, action='store', dest='jobname',
                    default='myjob', help='Job name')
parser.add_argument('-n', '--ntasks', type=str, action='store', dest='ntasks',
                    default='1', help='Total number of tasks')
parser.add_argument('-t', '--time', type=str, action='store', dest='walltime',
                    default='1', help='Required time (in hours)')
parser.add_argument('-g', '--gpu', type=str, action='store', dest='gpu',
                    default=None, help='GPUs per node')
args = parser.parse_args()

def fmt(directive, value, comment):
    comment_start_col = 34
    spaces = " " * abs(comment_start_col - (len(directive) + len(value) + 12))
    comment = f"# {comment}" if comment else ""
    s = f"#SBATCH --{directive}={value}{spaces}{comment}\n" 
    return s

with open('job.slurm', 'w') as f:
    f.write("#!/bin/bash\n")
    f.write(fmt("job-name", args.jobname, "create a short name for your job"))
    f.write(fmt("nodes", "1", "node count"))
    f.write(fmt("ntasks", args.ntasks, "total number of tasks across all nodes"))
    f.write(fmt("cpus-per-task", "1", "cpu-cores per task (>1 if multi-threaded tasks)"))
    f.write(fmt("mem-per-cpu", "4G", "memory per cpu-core (4G per cpu-core is default)"))
    f.write(fmt("time", f"{args.walltime}:00:00", "total run time limit (HH:MM:SS)"))
    if (args.gpu):
        f.write(fmt("gres", "gpu:" + args.gpu, "number of gpus per node"))
    f.write(fmt("mail-type", "all", "receive email notifications"))
    f.write(fmt("mail-user", f"{os.environ['USER']}@princeton.edu", ""))
    f.write("\n")
    f.write("module purge\n")
    f.write("module load anaconda3/2025.6\n")
    f.write("conda activate myenv\n")
    f.write("\n")
    f.write("python myscript.py\n")

print("Wrote job.slurm")
